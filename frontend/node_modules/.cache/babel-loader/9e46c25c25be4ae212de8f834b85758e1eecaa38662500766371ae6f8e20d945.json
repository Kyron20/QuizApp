{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\koolk\\\\Documents\\\\QuizApp\\\\frontend\\\\src\\\\components\\\\googlelogin.js\";\n// googlelogin.js\nimport React from 'react';\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleLoginComponent = ({\n  onSuccess,\n  onFailure\n}) => {\n  const clientId = process.env.REACT_APP_GOOGLE_CLIENT_ID;\n  if (!clientId) {\n    console.error('Google Client ID is not set');\n  }\n  const handleSuccess = async response => {\n    const token = response.credential;\n    try {\n      const res = await fetch('http://localhost:5000/api/auth/google-login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token\n        })\n      });\n      const data = await res.json();\n      if (res.ok) {\n        onSuccess(data);\n      } else {\n        onFailure(data);\n      }\n    } catch (error) {\n      onFailure(error);\n    }\n  };\n  const handleError = error => {\n    onFailure(error);\n  };\n  return /*#__PURE__*/_jsxDEV(GoogleOAuthProvider, {\n    clientId: clientId,\n    children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n      onSuccess: handleSuccess,\n      onError: handleError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_c = GoogleLoginComponent;\nexport default GoogleLoginComponent;\nvar _c;\n$RefreshReg$(_c, \"GoogleLoginComponent\");","map":{"version":3,"names":["React","GoogleOAuthProvider","GoogleLogin","jsxDEV","_jsxDEV","GoogleLoginComponent","onSuccess","onFailure","clientId","process","env","REACT_APP_GOOGLE_CLIENT_ID","console","error","handleSuccess","response","token","credential","res","fetch","method","headers","body","JSON","stringify","data","json","ok","handleError","children","onError","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/koolk/Documents/QuizApp/frontend/src/components/googlelogin.js"],"sourcesContent":["// googlelogin.js\r\nimport React from 'react';\r\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\r\n\r\nconst GoogleLoginComponent = ({ onSuccess, onFailure }) => {\r\n  const clientId = process.env.REACT_APP_GOOGLE_CLIENT_ID;\r\n  \r\n  if (!clientId) {\r\n    console.error('Google Client ID is not set');\r\n  }\r\n\r\n  const handleSuccess = async (response) => {\r\n    const token = response.credential;\r\n\r\n    try {\r\n      const res = await fetch('http://localhost:5000/api/auth/google-login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ token }),\r\n      });\r\n\r\n      const data = await res.json();\r\n\r\n      if (res.ok) {\r\n        onSuccess(data);\r\n      } else {\r\n        onFailure(data);\r\n      }\r\n    } catch (error) {\r\n      onFailure(error);\r\n    }\r\n  };\r\n\r\n  const handleError = (error) => {\r\n    onFailure(error);\r\n  };\r\n\r\n  return (\r\n    <GoogleOAuthProvider clientId={clientId}>\r\n      <GoogleLogin\r\n        onSuccess={handleSuccess}\r\n        onError={handleError}\r\n      />\r\n    </GoogleOAuthProvider>\r\n  );\r\n};\r\n\r\nexport default GoogleLoginComponent;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,mBAAmB,EAAEC,WAAW,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,MAAMC,oBAAoB,GAAGA,CAAC;EAAEC,SAAS;EAAEC;AAAU,CAAC,KAAK;EACzD,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B;EAEvD,IAAI,CAACH,QAAQ,EAAE;IACbI,OAAO,CAACC,KAAK,CAAC,6BAA6B,CAAC;EAC9C;EAEA,MAAMC,aAAa,GAAG,MAAOC,QAAQ,IAAK;IACxC,MAAMC,KAAK,GAAGD,QAAQ,CAACE,UAAU;IAEjC,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,6CAA6C,EAAE;QACrEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER;QAAM,CAAC;MAChC,CAAC,CAAC;MAEF,MAAMS,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,CAAC;MAE7B,IAAIR,GAAG,CAACS,EAAE,EAAE;QACVrB,SAAS,CAACmB,IAAI,CAAC;MACjB,CAAC,MAAM;QACLlB,SAAS,CAACkB,IAAI,CAAC;MACjB;IACF,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdN,SAAS,CAACM,KAAK,CAAC;IAClB;EACF,CAAC;EAED,MAAMe,WAAW,GAAIf,KAAK,IAAK;IAC7BN,SAAS,CAACM,KAAK,CAAC;EAClB,CAAC;EAED,oBACET,OAAA,CAACH,mBAAmB;IAACO,QAAQ,EAAEA,QAAS;IAAAqB,QAAA,eACtCzB,OAAA,CAACF,WAAW;MACVI,SAAS,EAAEQ,aAAc;MACzBgB,OAAO,EAAEF;IAAY;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAE1B,CAAC;AAACC,EAAA,GA3CI9B,oBAAoB;AA6C1B,eAAeA,oBAAoB;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}