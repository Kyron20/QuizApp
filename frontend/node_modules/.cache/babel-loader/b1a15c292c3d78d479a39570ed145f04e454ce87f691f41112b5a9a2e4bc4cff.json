{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Create a new quiz\nexport const createQuiz = async quizData => {\n  try {\n    const response = await axios.post(`${API_URL}/quizzes`, quizData);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating quiz:', error);\n    throw new Error(error.response ? error.response.data.error : error.message);\n  }\n};\n\n// Get a specific quiz by ID and creator ID\nexport const getQuiz = async (quizId, creatorId) => {\n  try {\n    const response = await axios.get(`${API_URL}/quizzes/${quizId}`, {\n      params: {\n        creatorId\n      } // Ensure params is always an object\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching quiz:', error);\n    throw error;\n  }\n};\n\n// Get a quiz by title\nexport const getQuizByTitle = async title => {\n  try {\n    const response = await axios.get(`${API_URL}/quizzes`, {\n      params: {\n        title\n      } // Ensure params is always an object\n    });\n    return response.data; // Return response.data instead of the entire response\n  } catch (error) {\n    console.error('Error fetching quiz by title:', error);\n    throw error;\n  }\n};\n\n// Fetch quizzes by username and optionally title\nexport const getQuizList = async params => {\n  // Ensure params is an object before making the request\n  if (typeof params !== 'object' || params === null) {\n    console.error('Invalid parameters for getQuizList');\n    throw new Error('Parameters must be an object');\n  }\n  try {\n    const response = await axios.get(`${API_URL}/quizzes`, {\n      params\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching quizzes:', error);\n    throw error;\n  }\n};\n\n// Get a quiz by creator ID and quiz ID\nexport const getQuizByCreatorAndId = async (quizId, creatorId) => {\n  try {\n    const response = await axios.get(`${API_URL}/quizzes/${quizId}`, {\n      params: {\n        creatorId\n      } // Ensure params is always an object\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching quiz by creator and ID:', error);\n    throw error;\n  }\n};\n\n// Update a quiz\nexport const updateQuiz = async (quizId, title, questions, creatorId) => {\n  try {\n    const response = await axios.put(`${API_URL}/quizzes/${quizId}`, {\n      title,\n      questions,\n      creatorId\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error updating quiz:', error);\n    throw error;\n  }\n};\n\n// Fetch quiz by creator ID and title\nexport const getQuizByTitleAndCreator = async (creatorId, title) => {\n  try {\n    const response = await axios.get(`${API_URL}/quizzes`, {\n      params: {\n        creatorId,\n        title\n      } // Ensure params is always an object\n    });\n    return response.data; // Return response.data instead of the entire response\n  } catch (error) {\n    console.error('Error fetching quiz by title and creator:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","createQuiz","quizData","response","post","data","error","console","Error","message","getQuiz","quizId","creatorId","get","params","getQuizByTitle","title","getQuizList","getQuizByCreatorAndId","updateQuiz","questions","put","getQuizByTitleAndCreator"],"sources":["C:/Users/koolk/Documents/QuizApplication/QuizApp/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Create a new quiz\r\nexport const createQuiz = async (quizData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/quizzes`, quizData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating quiz:', error);\r\n    throw new Error(error.response ? error.response.data.error : error.message);\r\n  }\r\n};\r\n\r\n// Get a specific quiz by ID and creator ID\r\nexport const getQuiz = async (quizId, creatorId) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/quizzes/${quizId}`, {\r\n      params: { creatorId } // Ensure params is always an object\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching quiz:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get a quiz by title\r\nexport const getQuizByTitle = async (title) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/quizzes`, {\r\n      params: { title } // Ensure params is always an object\r\n    });\r\n    return response.data; // Return response.data instead of the entire response\r\n  } catch (error) {\r\n    console.error('Error fetching quiz by title:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch quizzes by username and optionally title\r\nexport const getQuizList = async (params) => {\r\n  // Ensure params is an object before making the request\r\n  if (typeof params !== 'object' || params === null) {\r\n    console.error('Invalid parameters for getQuizList');\r\n    throw new Error('Parameters must be an object');\r\n  }\r\n\r\n  try {\r\n    const response = await axios.get(`${API_URL}/quizzes`, { params });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching quizzes:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get a quiz by creator ID and quiz ID\r\nexport const getQuizByCreatorAndId = async (quizId, creatorId) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/quizzes/${quizId}`, {\r\n      params: { creatorId } // Ensure params is always an object\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching quiz by creator and ID:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update a quiz\r\nexport const updateQuiz = async (quizId, title, questions, creatorId) => {\r\n  try {\r\n    const response = await axios.put(`${API_URL}/quizzes/${quizId}`, {\r\n      title,\r\n      questions,\r\n      creatorId\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating quiz:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch quiz by creator ID and title\r\nexport const getQuizByTitleAndCreator = async (creatorId, title) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/quizzes`, {\r\n      params: { creatorId, title } // Ensure params is always an object\r\n    });\r\n    return response.data; // Return response.data instead of the entire response\r\n  } catch (error) {\r\n    console.error('Error fetching quiz by title and creator:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}